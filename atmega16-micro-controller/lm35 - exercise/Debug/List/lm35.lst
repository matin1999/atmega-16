
AVRASM ver. 2.1.30  C:\Users\akhgari\Desktop\az_rizpardazandeh\lm35 - exercise\Debug\List\lm35.asm Fri Dec 02 14:10:30 2022

C:\Users\akhgari\Desktop\az_rizpardazandeh\lm35 - exercise\Debug\List\lm35.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\akhgari\Desktop\az_rizpardazandeh\lm35 - exercise\Debug\List\lm35.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\akhgari\Desktop\az_rizpardazandeh\lm35 - exercise\Debug\List\lm35.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\akhgari\Desktop\az_rizpardazandeh\lm35 - exercise\Debug\List\lm35.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\akhgari\Desktop\az_rizpardazandeh\lm35 - exercise\Debug\List\lm35.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temp=R4
                 	.DEF _temp_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000      	.DB  0x0,0x0
                 
                 _0x0:
000034 6574
000035 706d
000036 3d20
000037 2520      	.DB  0x74,0x65,0x6D,0x70,0x20,0x3D,0x20,0x25
000038 0064      	.DB  0x64,0x0
                 _0x2020003:
000039 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003a 0002      	.DW  0x02
00003b 0004      	.DW  0x04
00003c 0066      	.DW  __REG_VARS*2
                 
00003d 0002      	.DW  0x02
00003e 0174      	.DW  __base_y_G101
00003f 0072      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c 940c 007c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 000F {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0010 ADMUX=adc_input | ADC_VREF_TYPE;
00006e 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00006f 81e8      	LD   R30,Y
000070 b9e7      	OUT  0x7,R30
                 ; 0000 0011 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0012 delay_us(10);
                +
000071 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000072 958a     +DEC R24
000073 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0013 // Start the AD conversion
                 ; 0000 0014 ADCSRA|=(1<<ADSC);
000074 9a36      	SBI  0x6,6
                 ; 0000 0015 // Wait for the AD conversion to complete
                 ; 0000 0016 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000075 9b34      	SBIS 0x6,4
000076 cffe      	RJMP _0x3
                 ; 0000 0017 ADCSRA|=(1<<ADIF);
000077 9a34      	SBI  0x6,4
                 ; 0000 0018 return ADCW;
000078 b1e4      	IN   R30,0x4
000079 b1f5      	IN   R31,0x4+1
00007a 940c 031c 	JMP  _0x2080001
                 ; 0000 0019 }
                 ; .FEND
                 ;int temp =0;
                 ;char st[20];
                 ;void main(void)
                 ; 0000 001D {
                 _main:
                 ; .FSTART _main
                 ; 0000 001E // Declare your local variables here
                 ; 0000 001F 
                 ; 0000 0020 // Input/Output Ports initialization
                 ; 0000 0021 // Port A initialization
                 ; 0000 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0023 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00007c e0e0      	LDI  R30,LOW(0)
00007d bbea      	OUT  0x1A,R30
                 ; 0000 0024 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0025 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00007e bbeb      	OUT  0x1B,R30
                 ; 0000 0026 
                 ; 0000 0027 // Port B initialization
                 ; 0000 0028 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0029 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00007f bbe7      	OUT  0x17,R30
                 ; 0000 002A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000080 bbe8      	OUT  0x18,R30
                 ; 0000 002C 
                 ; 0000 002D // Port C initialization
                 ; 0000 002E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002F DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000081 bbe4      	OUT  0x14,R30
                 ; 0000 0030 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0031 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000082 bbe5      	OUT  0x15,R30
                 ; 0000 0032 
                 ; 0000 0033 // Port D initialization
                 ; 0000 0034 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0035 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000083 bbe1      	OUT  0x11,R30
                 ; 0000 0036 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0037 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000084 bbe2      	OUT  0x12,R30
                 ; 0000 0038 
                 ; 0000 0039 // Timer/Counter 0 initialization
                 ; 0000 003A // Clock source: System Clock
                 ; 0000 003B // Clock value: Timer 0 Stopped
                 ; 0000 003C // Mode: Normal top=0xFF
                 ; 0000 003D // OC0 output: Disconnected
                 ; 0000 003E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000085 bfe3      	OUT  0x33,R30
                 ; 0000 003F TCNT0=0x00;
000086 bfe2      	OUT  0x32,R30
                 ; 0000 0040 OCR0=0x00;
000087 bfec      	OUT  0x3C,R30
                 ; 0000 0041 
                 ; 0000 0042 // Timer/Counter 1 initialization
                 ; 0000 0043 // Clock source: System Clock
                 ; 0000 0044 // Clock value: Timer1 Stopped
                 ; 0000 0045 // Mode: Normal top=0xFFFF
                 ; 0000 0046 // OC1A output: Disconnected
                 ; 0000 0047 // OC1B output: Disconnected
                 ; 0000 0048 // Noise Canceler: Off
                 ; 0000 0049 // Input Capture on Falling Edge
                 ; 0000 004A // Timer1 Overflow Interrupt: Off
                 ; 0000 004B // Input Capture Interrupt: Off
                 ; 0000 004C // Compare A Match Interrupt: Off
                 ; 0000 004D // Compare B Match Interrupt: Off
                 ; 0000 004E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000088 bdef      	OUT  0x2F,R30
                 ; 0000 004F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000089 bdee      	OUT  0x2E,R30
                 ; 0000 0050 TCNT1H=0x00;
00008a bded      	OUT  0x2D,R30
                 ; 0000 0051 TCNT1L=0x00;
00008b bdec      	OUT  0x2C,R30
                 ; 0000 0052 ICR1H=0x00;
00008c bde7      	OUT  0x27,R30
                 ; 0000 0053 ICR1L=0x00;
00008d bde6      	OUT  0x26,R30
                 ; 0000 0054 OCR1AH=0x00;
00008e bdeb      	OUT  0x2B,R30
                 ; 0000 0055 OCR1AL=0x00;
00008f bdea      	OUT  0x2A,R30
                 ; 0000 0056 OCR1BH=0x00;
000090 bde9      	OUT  0x29,R30
                 ; 0000 0057 OCR1BL=0x00;
000091 bde8      	OUT  0x28,R30
                 ; 0000 0058 
                 ; 0000 0059 // Timer/Counter 2 initialization
                 ; 0000 005A // Clock source: System Clock
                 ; 0000 005B // Clock value: Timer2 Stopped
                 ; 0000 005C // Mode: Normal top=0xFF
                 ; 0000 005D // OC2 output: Disconnected
                 ; 0000 005E ASSR=0<<AS2;
000092 bde2      	OUT  0x22,R30
                 ; 0000 005F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000093 bde5      	OUT  0x25,R30
                 ; 0000 0060 TCNT2=0x00;
000094 bde4      	OUT  0x24,R30
                 ; 0000 0061 OCR2=0x00;
000095 bde3      	OUT  0x23,R30
                 ; 0000 0062 
                 ; 0000 0063 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0064 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000096 bfe9      	OUT  0x39,R30
                 ; 0000 0065 
                 ; 0000 0066 // External Interrupt(s) initialization
                 ; 0000 0067 // INT0: Off
                 ; 0000 0068 // INT1: Off
                 ; 0000 0069 // INT2: Off
                 ; 0000 006A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000097 bfe5      	OUT  0x35,R30
                 ; 0000 006B MCUCSR=(0<<ISC2);
000098 bfe4      	OUT  0x34,R30
                 ; 0000 006C 
                 ; 0000 006D // USART initialization
                 ; 0000 006E // USART disabled
                 ; 0000 006F UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000099 b9ea      	OUT  0xA,R30
                 ; 0000 0070 
                 ; 0000 0071 // Analog Comparator initialization
                 ; 0000 0072 // Analog Comparator: Off
                 ; 0000 0073 // The Analog Comparator's positive input is
                 ; 0000 0074 // connected to the AIN0 pin
                 ; 0000 0075 // The Analog Comparator's negative input is
                 ; 0000 0076 // connected to the AIN1 pin
                 ; 0000 0077 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00009a e8e0      	LDI  R30,LOW(128)
00009b b9e8      	OUT  0x8,R30
                 ; 0000 0078 
                 ; 0000 0079 // ADC initialization
                 ; 0000 007A // ADC Clock frequency: 1000.000 kHz
                 ; 0000 007B // ADC Voltage Reference: AREF pin
                 ; 0000 007C // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 007D ADMUX=ADC_VREF_TYPE;
00009c e0e0      	LDI  R30,LOW(0)
00009d b9e7      	OUT  0x7,R30
                 ; 0000 007E ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00009e e8e3      	LDI  R30,LOW(131)
00009f b9e6      	OUT  0x6,R30
                 ; 0000 007F SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bfe0      	OUT  0x30,R30
                 ; 0000 0080 
                 ; 0000 0081 // SPI initialization
                 ; 0000 0082 // SPI disabled
                 ; 0000 0083 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a2 b9ed      	OUT  0xD,R30
                 ; 0000 0084 
                 ; 0000 0085 // TWI initialization
                 ; 0000 0086 // TWI disabled
                 ; 0000 0087 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a3 bfe6      	OUT  0x36,R30
                 ; 0000 0088 
                 ; 0000 0089 // Alphanumeric LCD initialization
                 ; 0000 008A // Connections are specified in the
                 ; 0000 008B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 008C // RS - PORTA Bit 0
                 ; 0000 008D // RD - PORTA Bit 1
                 ; 0000 008E // EN - PORTA Bit 2
                 ; 0000 008F // D4 - PORTA Bit 4
                 ; 0000 0090 // D5 - PORTA Bit 5
                 ; 0000 0091 // D6 - PORTA Bit 6
                 ; 0000 0092 // D7 - PORTA Bit 7
                 ; 0000 0093 // Characters/line: 8
                 ; 0000 0094 lcd_init(8);
0000a4 e0a8      	LDI  R26,LOW(8)
0000a5 940e 02f0 	CALL _lcd_init
                 ; 0000 0095 DDRB = 0b11111111; /* define LED port direction is output */
0000a7 efef      	LDI  R30,LOW(255)
0000a8 bbe7      	OUT  0x17,R30
                 ; 0000 0096 
                 ; 0000 0097 
                 ; 0000 0098 while (1)
                 _0x6:
                 ; 0000 0099       {
                 ; 0000 009A       // Place your code here
                 ; 0000 009B       temp = read_adc(3);
0000a9 e0a3      	LDI  R26,LOW(3)
0000aa dfc3      	RCALL _read_adc
0000ab 012f      	MOVW R4,R30
                 ; 0000 009C       temp = temp / 2.06;
0000ac 940e 0464 	CALL __CWD1
0000ae 940e 03e1 	CALL __CDF1
0000b0 01df      	MOVW R26,R30
0000b1 01cb      	MOVW R24,R22
                +
0000b2 e0ea     +LDI R30 , LOW ( 0x4003D70A )
0000b3 edf7     +LDI R31 , HIGH ( 0x4003D70A )
0000b4 e063     +LDI R22 , BYTE3 ( 0x4003D70A )
0000b5 e470     +LDI R23 , BYTE4 ( 0x4003D70A )
                 	__GETD1N 0x4003D70A
0000b6 940e 040f 	CALL __DIVF21
0000b8 940e 03aa 	CALL __CFD1
0000ba 012f      	MOVW R4,R30
                 ; 0000 009D       if (temp >70)
0000bb e4e6      	LDI  R30,LOW(70)
0000bc e0f0      	LDI  R31,HIGH(70)
0000bd 15e4      	CP   R30,R4
0000be 05f5      	CPC  R31,R5
0000bf f464      	BRGE _0x9
                 ; 0000 009E       {
                 ; 0000 009F        PORTB = 0b00000001; // Set PortB0 output high, others low
0000c0 e0e1      	LDI  R30,LOW(1)
0000c1 bbe8      	OUT  0x18,R30
                 ; 0000 00A0        delay_ms(20); // Do nothing for 250 ms
0000c2 e1a4      	LDI  R26,LOW(20)
0000c3 e0b0      	LDI  R27,0
0000c4 940e 0371 	CALL _delay_ms
                 ; 0000 00A1        PORTB = 0b00000000; // Set all of them low
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe8      	OUT  0x18,R30
                 ; 0000 00A2        delay_ms(50);
0000c8 e3a2      	LDI  R26,LOW(50)
0000c9 e0b0      	LDI  R27,0
0000ca 940e 0371 	CALL _delay_ms
                 ; 0000 00A3       }
                 ; 0000 00A4       sprintf(st,"temp = %d",temp);
                 _0x9:
0000cc e6e0      	LDI  R30,LOW(_st)
0000cd e0f1      	LDI  R31,HIGH(_st)
0000ce 93fa      	ST   -Y,R31
0000cf 93ea      	ST   -Y,R30
                +
0000d0 e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000d2 93fa      	ST   -Y,R31
0000d3 93ea      	ST   -Y,R30
0000d4 01f2      	MOVW R30,R4
0000d5 940e 0464 	CALL __CWD1
0000d7 940e 0471 	CALL __PUTPARD1
0000d9 e084      	LDI  R24,4
0000da 940e 025d 	CALL _sprintf
0000dc 9628      	ADIW R28,8
                 ; 0000 00A5       lcd_clear();
0000dd 940e 02be 	CALL _lcd_clear
                 ; 0000 00A6       lcd_puts(st);
0000df e6a0      	LDI  R26,LOW(_st)
0000e0 e0b1      	LDI  R27,HIGH(_st)
0000e1 940e 02df 	CALL _lcd_puts
                 ; 0000 00A7       delay_ms(50);
0000e3 e3a2      	LDI  R26,LOW(50)
0000e4 e0b0      	LDI  R27,0
0000e5 940e 0371 	CALL _delay_ms
                 ; 0000 00A8       }
0000e7 cfc1      	RJMP _0x6
                 ; 0000 00A9 }
                 _0xA:
0000e8 cfff      	RJMP _0xA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000e9 93ba      	ST   -Y,R27
0000ea 93aa      	ST   -Y,R26
0000eb 931a      	ST   -Y,R17
0000ec 930a      	ST   -Y,R16
0000ed 81aa      	LDD  R26,Y+2
0000ee 81bb      	LDD  R27,Y+2+1
0000ef 9612      	ADIW R26,2
0000f0 940e 0469 	CALL __GETW1P
0000f2 9730      	SBIW R30,0
0000f3 f159      	BREQ _0x2000010
0000f4 81aa      	LDD  R26,Y+2
0000f5 81bb      	LDD  R27,Y+2+1
0000f6 9614      	ADIW R26,4
0000f7 940e 0469 	CALL __GETW1P
0000f9 018f      	MOVW R16,R30
0000fa 9730      	SBIW R30,0
0000fb f061      	BREQ _0x2000012
                +
0000fc 3002     +CPI R16 , LOW ( 2 )
0000fd e0e0     +LDI R30 , HIGH ( 2 )
0000fe 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000ff f098      	BRLO _0x2000013
000100 01f8      	MOVW R30,R16
000101 9731      	SBIW R30,1
000102 018f      	MOVW R16,R30
                +
000103 81aa     +LDD R26 , Y + 2
000104 81bb     +LDD R27 , Y + 2 + 1
000105 9614     +ADIW R26 , 4
000106 93ed     +ST X + , R30
000107 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000108 81aa      	LDD  R26,Y+2
000109 81bb      	LDD  R27,Y+2+1
00010a 9612      	ADIW R26,2
00010b 91ed      	LD   R30,X+
00010c 91fd      	LD   R31,X+
00010d 9631      	ADIW R30,1
00010e 93fe      	ST   -X,R31
00010f 93ee      	ST   -X,R30
000110 9731      	SBIW R30,1
000111 81ac      	LDD  R26,Y+4
000112 83a0      	STD  Z+0,R26
                 _0x2000013:
000113 81aa      	LDD  R26,Y+2
000114 81bb      	LDD  R27,Y+2+1
000115 940e 0469 	CALL __GETW1P
000117 23ff      	TST  R31
000118 f02a      	BRMI _0x2000014
000119 91ed      	LD   R30,X+
00011a 91fd      	LD   R31,X+
00011b 9631      	ADIW R30,1
00011c 93fe      	ST   -X,R31
00011d 93ee      	ST   -X,R30
                 _0x2000014:
00011e c006      	RJMP _0x2000015
                 _0x2000010:
00011f 81aa      	LDD  R26,Y+2
000120 81bb      	LDD  R27,Y+2+1
000121 efef      	LDI  R30,LOW(65535)
000122 efff      	LDI  R31,HIGH(65535)
000123 93ed      	ST   X+,R30
000124 93fc      	ST   X,R31
                 _0x2000015:
000125 8119      	LDD  R17,Y+1
000126 8108      	LDD  R16,Y+0
000127 9625      	ADIW R28,5
000128 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000129 93ba      	ST   -Y,R27
00012a 93aa      	ST   -Y,R26
00012b 9726      	SBIW R28,6
00012c 940e 0476 	CALL __SAVELOCR6
00012e e010      	LDI  R17,0
00012f 85ac      	LDD  R26,Y+12
000130 85bd      	LDD  R27,Y+12+1
000131 e0e0      	LDI  R30,LOW(0)
000132 e0f0      	LDI  R31,HIGH(0)
000133 93ed      	ST   X+,R30
000134 93fc      	ST   X,R31
                 _0x2000016:
000135 89ea      	LDD  R30,Y+18
000136 89fb      	LDD  R31,Y+18+1
000137 9631      	ADIW R30,1
000138 8bea      	STD  Y+18,R30
000139 8bfb      	STD  Y+18+1,R31
00013a 9731      	SBIW R30,1
00013b 91e4      	LPM  R30,Z
00013c 2f2e      	MOV  R18,R30
00013d 30e0      	CPI  R30,0
00013e f409      	BRNE PC+2
00013f c115      	RJMP _0x2000018
000140 2fe1      	MOV  R30,R17
000141 30e0      	CPI  R30,0
000142 f439      	BRNE _0x200001C
000143 3225      	CPI  R18,37
000144 f411      	BRNE _0x200001D
000145 e011      	LDI  R17,LOW(1)
000146 c002      	RJMP _0x200001E
                 _0x200001D:
000147 940e 0337 	CALL SUBOPT_0x0
                 _0x200001E:
000149 c10a      	RJMP _0x200001B
                 _0x200001C:
00014a 30e1      	CPI  R30,LOW(0x1)
00014b f4a9      	BRNE _0x200001F
00014c 3225      	CPI  R18,37
00014d f419      	BRNE _0x2000020
00014e 940e 0337 	CALL SUBOPT_0x0
000150 c102      	RJMP _0x20000CC
                 _0x2000020:
000151 e012      	LDI  R17,LOW(2)
000152 e040      	LDI  R20,LOW(0)
000153 e000      	LDI  R16,LOW(0)
000154 322d      	CPI  R18,45
000155 f411      	BRNE _0x2000021
000156 e001      	LDI  R16,LOW(1)
000157 c0fc      	RJMP _0x200001B
                 _0x2000021:
000158 322b      	CPI  R18,43
000159 f411      	BRNE _0x2000022
00015a e24b      	LDI  R20,LOW(43)
00015b c0f8      	RJMP _0x200001B
                 _0x2000022:
00015c 3220      	CPI  R18,32
00015d f411      	BRNE _0x2000023
00015e e240      	LDI  R20,LOW(32)
00015f c0f4      	RJMP _0x200001B
                 _0x2000023:
000160 c002      	RJMP _0x2000024
                 _0x200001F:
000161 30e2      	CPI  R30,LOW(0x2)
000162 f439      	BRNE _0x2000025
                 _0x2000024:
000163 e050      	LDI  R21,LOW(0)
000164 e013      	LDI  R17,LOW(3)
000165 3320      	CPI  R18,48
000166 f411      	BRNE _0x2000026
000167 6800      	ORI  R16,LOW(128)
000168 c0eb      	RJMP _0x200001B
                 _0x2000026:
000169 c003      	RJMP _0x2000027
                 _0x2000025:
00016a 30e3      	CPI  R30,LOW(0x3)
00016b f009      	BREQ PC+2
00016c c0e7      	RJMP _0x200001B
                 _0x2000027:
00016d 3320      	CPI  R18,48
00016e f010      	BRLO _0x200002A
00016f 332a      	CPI  R18,58
000170 f008      	BRLO _0x200002B
                 _0x200002A:
000171 c007      	RJMP _0x2000029
                 _0x200002B:
000172 e0aa      	LDI  R26,LOW(10)
000173 9f5a      	MUL  R21,R26
000174 2d50      	MOV  R21,R0
000175 2fe2      	MOV  R30,R18
000176 53e0      	SUBI R30,LOW(48)
000177 0f5e      	ADD  R21,R30
000178 c0db      	RJMP _0x200001B
                 _0x2000029:
000179 2fe2      	MOV  R30,R18
00017a 36e3      	CPI  R30,LOW(0x63)
00017b f449      	BRNE _0x200002F
00017c 940e 033e 	CALL SUBOPT_0x1
00017e 89e8      	LDD  R30,Y+16
00017f 89f9      	LDD  R31,Y+16+1
000180 81a4      	LDD  R26,Z+4
000181 93aa      	ST   -Y,R26
000182 940e 0344 	CALL SUBOPT_0x2
000184 c0ce      	RJMP _0x2000030
                 _0x200002F:
000185 37e3      	CPI  R30,LOW(0x73)
000186 f441      	BRNE _0x2000032
000187 940e 033e 	CALL SUBOPT_0x1
000189 940e 034a 	CALL SUBOPT_0x3
00018b 940e 031e 	CALL _strlen
00018d 2f1e      	MOV  R17,R30
00018e c00a      	RJMP _0x2000033
                 _0x2000032:
00018f 37e0      	CPI  R30,LOW(0x70)
000190 f461      	BRNE _0x2000035
000191 940e 033e 	CALL SUBOPT_0x1
000193 940e 034a 	CALL SUBOPT_0x3
000195 940e 032a 	CALL _strlenf
000197 2f1e      	MOV  R17,R30
000198 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000199 6002      	ORI  R16,LOW(2)
00019a 770f      	ANDI R16,LOW(127)
00019b e030      	LDI  R19,LOW(0)
00019c c034      	RJMP _0x2000036
                 _0x2000035:
00019d 36e4      	CPI  R30,LOW(0x64)
00019e f011      	BREQ _0x2000039
00019f 36e9      	CPI  R30,LOW(0x69)
0001a0 f411      	BRNE _0x200003A
                 _0x2000039:
0001a1 6004      	ORI  R16,LOW(4)
0001a2 c002      	RJMP _0x200003B
                 _0x200003A:
0001a3 37e5      	CPI  R30,LOW(0x75)
0001a4 f431      	BRNE _0x200003C
                 _0x200003B:
0001a5 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001a6 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001a7 83ee      	STD  Y+6,R30
0001a8 83ff      	STD  Y+6+1,R31
0001a9 e015      	LDI  R17,LOW(5)
0001aa c00c      	RJMP _0x200003D
                 _0x200003C:
0001ab 35e8      	CPI  R30,LOW(0x58)
0001ac f411      	BRNE _0x200003F
0001ad 6008      	ORI  R16,LOW(8)
0001ae c003      	RJMP _0x2000040
                 _0x200003F:
0001af 37e8      	CPI  R30,LOW(0x78)
0001b0 f009      	BREQ PC+2
0001b1 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001b2 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001b3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001b4 83ee      	STD  Y+6,R30
0001b5 83ff      	STD  Y+6+1,R31
0001b6 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001b7 ff02      	SBRS R16,2
0001b8 c014      	RJMP _0x2000042
0001b9 940e 033e 	CALL SUBOPT_0x1
0001bb 940e 0354 	CALL SUBOPT_0x4
0001bd 85ab      	LDD  R26,Y+11
0001be 23aa      	TST  R26
0001bf f43a      	BRPL _0x2000043
0001c0 85ea      	LDD  R30,Y+10
0001c1 85fb      	LDD  R31,Y+10+1
0001c2 940e 0458 	CALL __ANEGW1
0001c4 87ea      	STD  Y+10,R30
0001c5 87fb      	STD  Y+10+1,R31
0001c6 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001c7 3040      	CPI  R20,0
0001c8 f011      	BREQ _0x2000044
0001c9 5f1f      	SUBI R17,-LOW(1)
0001ca c001      	RJMP _0x2000045
                 _0x2000044:
0001cb 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001cc c004      	RJMP _0x2000046
                 _0x2000042:
0001cd 940e 033e 	CALL SUBOPT_0x1
0001cf 940e 0354 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001d1 fd00      	SBRC R16,0
0001d2 c011      	RJMP _0x2000047
                 _0x2000048:
0001d3 1715      	CP   R17,R21
0001d4 f478      	BRSH _0x200004A
0001d5 ff07      	SBRS R16,7
0001d6 c008      	RJMP _0x200004B
0001d7 ff02      	SBRS R16,2
0001d8 c004      	RJMP _0x200004C
0001d9 7f0b      	ANDI R16,LOW(251)
0001da 2f24      	MOV  R18,R20
0001db 5011      	SUBI R17,LOW(1)
0001dc c001      	RJMP _0x200004D
                 _0x200004C:
0001dd e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001de c001      	RJMP _0x200004E
                 _0x200004B:
0001df e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001e0 940e 0337 	CALL SUBOPT_0x0
0001e2 5051      	SUBI R21,LOW(1)
0001e3 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001e4 2f31      	MOV  R19,R17
0001e5 ff01      	SBRS R16,1
0001e6 c017      	RJMP _0x200004F
                 _0x2000050:
0001e7 3030      	CPI  R19,0
0001e8 f0a1      	BREQ _0x2000052
0001e9 ff03      	SBRS R16,3
0001ea c006      	RJMP _0x2000053
0001eb 81ee      	LDD  R30,Y+6
0001ec 81ff      	LDD  R31,Y+6+1
0001ed 9125      	LPM  R18,Z+
0001ee 83ee      	STD  Y+6,R30
0001ef 83ff      	STD  Y+6+1,R31
0001f0 c005      	RJMP _0x2000054
                 _0x2000053:
0001f1 81ae      	LDD  R26,Y+6
0001f2 81bf      	LDD  R27,Y+6+1
0001f3 912d      	LD   R18,X+
0001f4 83ae      	STD  Y+6,R26
0001f5 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001f6 940e 0337 	CALL SUBOPT_0x0
0001f8 3050      	CPI  R21,0
0001f9 f009      	BREQ _0x2000055
0001fa 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001fb 5031      	SUBI R19,LOW(1)
0001fc cfea      	RJMP _0x2000050
                 _0x2000052:
0001fd c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001fe e320      	LDI  R18,LOW(48)
0001ff 81ee      	LDD  R30,Y+6
000200 81ff      	LDD  R31,Y+6+1
000201 940e 046d 	CALL __GETW1PF
000203 87e8      	STD  Y+8,R30
000204 87f9      	STD  Y+8+1,R31
000205 81ee      	LDD  R30,Y+6
000206 81ff      	LDD  R31,Y+6+1
000207 9632      	ADIW R30,2
000208 83ee      	STD  Y+6,R30
000209 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00020a 85e8      	LDD  R30,Y+8
00020b 85f9      	LDD  R31,Y+8+1
00020c 85aa      	LDD  R26,Y+10
00020d 85bb      	LDD  R27,Y+10+1
00020e 17ae      	CP   R26,R30
00020f 07bf      	CPC  R27,R31
000210 f050      	BRLO _0x200005C
000211 5f2f      	SUBI R18,-LOW(1)
000212 85a8      	LDD  R26,Y+8
000213 85b9      	LDD  R27,Y+8+1
000214 85ea      	LDD  R30,Y+10
000215 85fb      	LDD  R31,Y+10+1
000216 1bea      	SUB  R30,R26
000217 0bfb      	SBC  R31,R27
000218 87ea      	STD  Y+10,R30
000219 87fb      	STD  Y+10+1,R31
00021a cfef      	RJMP _0x200005A
                 _0x200005C:
00021b 332a      	CPI  R18,58
00021c f028      	BRLO _0x200005D
00021d ff03      	SBRS R16,3
00021e c002      	RJMP _0x200005E
00021f 5f29      	SUBI R18,-LOW(7)
000220 c001      	RJMP _0x200005F
                 _0x200005E:
000221 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000222 fd04      	SBRC R16,4
000223 c01a      	RJMP _0x2000061
000224 3321      	CPI  R18,49
000225 f420      	BRSH _0x2000063
000226 85a8      	LDD  R26,Y+8
000227 85b9      	LDD  R27,Y+8+1
000228 9711      	SBIW R26,1
000229 f409      	BRNE _0x2000062
                 _0x2000063:
00022a c009      	RJMP _0x20000CD
                 _0x2000062:
00022b 1753      	CP   R21,R19
00022c f010      	BRLO _0x2000067
00022d ff00      	SBRS R16,0
00022e c001      	RJMP _0x2000068
                 _0x2000067:
00022f c013      	RJMP _0x2000066
                 _0x2000068:
000230 e220      	LDI  R18,LOW(32)
000231 ff07      	SBRS R16,7
000232 c00b      	RJMP _0x2000069
000233 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000234 6100      	ORI  R16,LOW(16)
000235 ff02      	SBRS R16,2
000236 c007      	RJMP _0x200006A
000237 7f0b      	ANDI R16,LOW(251)
000238 934a      	ST   -Y,R20
000239 940e 0344 	CALL SUBOPT_0x2
00023b 3050      	CPI  R21,0
00023c f009      	BREQ _0x200006B
00023d 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00023e 940e 0337 	CALL SUBOPT_0x0
000240 3050      	CPI  R21,0
000241 f009      	BREQ _0x200006C
000242 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000243 5031      	SUBI R19,LOW(1)
000244 85a8      	LDD  R26,Y+8
000245 85b9      	LDD  R27,Y+8+1
000246 9712      	SBIW R26,2
000247 f008      	BRLO _0x2000059
000248 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000249 ff00      	SBRS R16,0
00024a c008      	RJMP _0x200006D
                 _0x200006E:
00024b 3050      	CPI  R21,0
00024c f031      	BREQ _0x2000070
00024d 5051      	SUBI R21,LOW(1)
00024e e2e0      	LDI  R30,LOW(32)
00024f 93ea      	ST   -Y,R30
000250 940e 0344 	CALL SUBOPT_0x2
000252 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000253 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000254 cee0      	RJMP _0x2000016
                 _0x2000018:
000255 85ac      	LDD  R26,Y+12
000256 85bd      	LDD  R27,Y+12+1
000257 940e 0469 	CALL __GETW1P
000259 940e 047d 	CALL __LOADLOCR6
00025b 9664      	ADIW R28,20
00025c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00025d 92ff      	PUSH R15
00025e 2ef8      	MOV  R15,R24
00025f 9726      	SBIW R28,6
000260 940e 0478 	CALL __SAVELOCR4
000262 940e 035c 	CALL SUBOPT_0x5
000264 9730      	SBIW R30,0
000265 f419      	BRNE _0x2000072
000266 efef      	LDI  R30,LOW(65535)
000267 efff      	LDI  R31,HIGH(65535)
000268 c023      	RJMP _0x2080002
                 _0x2000072:
000269 01de      	MOVW R26,R28
00026a 9616      	ADIW R26,6
00026b 940e 0454 	CALL __ADDW2R15
00026d 018d      	MOVW R16,R26
00026e 940e 035c 	CALL SUBOPT_0x5
000270 83ee      	STD  Y+6,R30
000271 83ff      	STD  Y+6+1,R31
000272 e0e0      	LDI  R30,LOW(0)
000273 87e8      	STD  Y+8,R30
000274 87e9      	STD  Y+8+1,R30
000275 01de      	MOVW R26,R28
000276 961a      	ADIW R26,10
000277 940e 0454 	CALL __ADDW2R15
000279 940e 0469 	CALL __GETW1P
00027b 93fa      	ST   -Y,R31
00027c 93ea      	ST   -Y,R30
00027d 931a      	ST   -Y,R17
00027e 930a      	ST   -Y,R16
00027f eee9      	LDI  R30,LOW(_put_buff_G100)
000280 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000281 93fa      	ST   -Y,R31
000282 93ea      	ST   -Y,R30
000283 01de      	MOVW R26,R28
000284 961a      	ADIW R26,10
000285 dea3      	RCALL __print_G100
000286 019f      	MOVW R18,R30
000287 81ae      	LDD  R26,Y+6
000288 81bf      	LDD  R27,Y+6+1
000289 e0e0      	LDI  R30,LOW(0)
00028a 93ec      	ST   X,R30
00028b 01f9      	MOVW R30,R18
                 _0x2080002:
00028c 940e 047f 	CALL __LOADLOCR4
00028e 962a      	ADIW R28,10
00028f 90ff      	POP  R15
000290 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000291 93aa      	ST   -Y,R26
000292 b3eb      	IN   R30,0x1B
000293 70ef      	ANDI R30,LOW(0xF)
000294 2fae      	MOV  R26,R30
000295 81e8      	LD   R30,Y
000296 7fe0      	ANDI R30,LOW(0xF0)
000297 2bea      	OR   R30,R26
000298 bbeb      	OUT  0x1B,R30
                +
000299 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00029a 958a     +DEC R24
00029b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00029c 9ada      	SBI  0x1B,2
                +
00029d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00029e 958a     +DEC R24
00029f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002a0 98da      	CBI  0x1B,2
                +
0002a1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002a2 958a     +DEC R24
0002a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002a4 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002a5 93aa      	ST   -Y,R26
0002a6 81a8      	LD   R26,Y
0002a7 dfe9      	RCALL __lcd_write_nibble_G101
0002a8 81e8          ld    r30,y
0002a9 95e2          swap  r30
0002aa 83e8          st    y,r30
0002ab 81a8      	LD   R26,Y
0002ac dfe4      	RCALL __lcd_write_nibble_G101
                +
0002ad e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002ae 958a     +DEC R24
0002af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002b0 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002b1 93aa      	ST   -Y,R26
0002b2 81e8      	LD   R30,Y
0002b3 e0f0      	LDI  R31,0
0002b4 58ec      	SUBI R30,LOW(-__base_y_G101)
0002b5 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0002b6 81e0      	LD   R30,Z
0002b7 81a9      	LDD  R26,Y+1
0002b8 0fae      	ADD  R26,R30
0002b9 dfeb      	RCALL __lcd_write_data
0002ba 8079      	LDD  R7,Y+1
0002bb 8068      	LDD  R6,Y+0
0002bc 9622      	ADIW R28,2
0002bd 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002be e0a2      	LDI  R26,LOW(2)
0002bf 940e 0363 	CALL SUBOPT_0x6
0002c1 e0ac      	LDI  R26,LOW(12)
0002c2 dfe2      	RCALL __lcd_write_data
0002c3 e0a1      	LDI  R26,LOW(1)
0002c4 940e 0363 	CALL SUBOPT_0x6
0002c6 e0e0      	LDI  R30,LOW(0)
0002c7 2e6e      	MOV  R6,R30
0002c8 2e7e      	MOV  R7,R30
0002c9 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002ca 93aa      	ST   -Y,R26
0002cb 81a8      	LD   R26,Y
0002cc 30aa      	CPI  R26,LOW(0xA)
0002cd f011      	BREQ _0x2020005
0002ce 1479      	CP   R7,R9
0002cf f048      	BRLO _0x2020004
                 _0x2020005:
0002d0 e0e0      	LDI  R30,LOW(0)
0002d1 93ea      	ST   -Y,R30
0002d2 9463      	INC  R6
0002d3 2da6      	MOV  R26,R6
0002d4 dfdc      	RCALL _lcd_gotoxy
0002d5 81a8      	LD   R26,Y
0002d6 30aa      	CPI  R26,LOW(0xA)
0002d7 f409      	BRNE _0x2020007
0002d8 c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002d9 9473      	INC  R7
0002da 9ad8      	SBI  0x1B,0
0002db 81a8      	LD   R26,Y
0002dc dfc8      	RCALL __lcd_write_data
0002dd 98d8      	CBI  0x1B,0
0002de c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002df 93ba      	ST   -Y,R27
0002e0 93aa      	ST   -Y,R26
0002e1 931a      	ST   -Y,R17
                 _0x2020008:
0002e2 81a9      	LDD  R26,Y+1
0002e3 81ba      	LDD  R27,Y+1+1
0002e4 91ed      	LD   R30,X+
0002e5 83a9      	STD  Y+1,R26
0002e6 83ba      	STD  Y+1+1,R27
0002e7 2f1e      	MOV  R17,R30
0002e8 30e0      	CPI  R30,0
0002e9 f019      	BREQ _0x202000A
0002ea 2fa1      	MOV  R26,R17
0002eb dfde      	RCALL _lcd_putchar
0002ec cff5      	RJMP _0x2020008
                 _0x202000A:
0002ed 8118      	LDD  R17,Y+0
0002ee 9623      	ADIW R28,3
0002ef 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002f0 93aa      	ST   -Y,R26
0002f1 b3ea      	IN   R30,0x1A
0002f2 6fe0      	ORI  R30,LOW(0xF0)
0002f3 bbea      	OUT  0x1A,R30
0002f4 9ad2      	SBI  0x1A,2
0002f5 9ad0      	SBI  0x1A,0
0002f6 9ad1      	SBI  0x1A,1
0002f7 98da      	CBI  0x1B,2
0002f8 98d8      	CBI  0x1B,0
0002f9 98d9      	CBI  0x1B,1
0002fa 8098      	LDD  R9,Y+0
0002fb 81e8      	LD   R30,Y
0002fc 58e0      	SUBI R30,-LOW(128)
                +
0002fd 93e0 0176+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002ff 81e8      	LD   R30,Y
000300 54e0      	SUBI R30,-LOW(192)
                +
000301 93e0 0177+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000303 e1a4      	LDI  R26,LOW(20)
000304 e0b0      	LDI  R27,0
000305 940e 0371 	CALL _delay_ms
000307 940e 0369 	CALL SUBOPT_0x7
000309 940e 0369 	CALL SUBOPT_0x7
00030b 940e 0369 	CALL SUBOPT_0x7
00030d e2a0      	LDI  R26,LOW(32)
00030e df82      	RCALL __lcd_write_nibble_G101
                +
00030f ec88     +LDI R24 , LOW ( 200 )
000310 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000311 9701     +SBIW R24 , 1
000312 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000313 e2a8      	LDI  R26,LOW(40)
000314 df90      	RCALL __lcd_write_data
000315 e0a4      	LDI  R26,LOW(4)
000316 df8e      	RCALL __lcd_write_data
000317 e8a5      	LDI  R26,LOW(133)
000318 df8c      	RCALL __lcd_write_data
000319 e0a6      	LDI  R26,LOW(6)
00031a df8a      	RCALL __lcd_write_data
00031b dfa2      	RCALL _lcd_clear
                 _0x2080001:
00031c 9621      	ADIW R28,1
00031d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 91a9          ld   r26,y+
000321 91b9          ld   r27,y+
000322 27ee          clr  r30
000323 27ff          clr  r31
                 strlen0:
000324 916d          ld   r22,x+
000325 2366          tst  r22
000326 f011          breq strlen1
000327 9631          adiw r30,1
000328 cffb          rjmp strlen0
                 strlen1:
000329 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00032a 93ba      	ST   -Y,R27
00032b 93aa      	ST   -Y,R26
00032c 27aa          clr  r26
00032d 27bb          clr  r27
00032e 91e9          ld   r30,y+
00032f 91f9          ld   r31,y+
                 strlenf0:
000330 9005      	lpm  r0,z+
000331 2000          tst  r0
000332 f011          breq strlenf1
000333 9611          adiw r26,1
000334 cffb          rjmp strlenf0
                 strlenf1:
000335 01fd          movw r30,r26
000336 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _st:
000160           	.BYTE 0x14
                 __base_y_G101:
000174           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000337 932a      	ST   -Y,R18
000338 85ad      	LDD  R26,Y+13
000339 85be      	LDD  R27,Y+13+1
00033a 85ef      	LDD  R30,Y+15
00033b 89f8      	LDD  R31,Y+15+1
00033c 9509      	ICALL
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00033e 89e8      	LDD  R30,Y+16
00033f 89f9      	LDD  R31,Y+16+1
000340 9734      	SBIW R30,4
000341 8be8      	STD  Y+16,R30
000342 8bf9      	STD  Y+16+1,R31
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000344 85ad      	LDD  R26,Y+13
000345 85be      	LDD  R27,Y+13+1
000346 85ef      	LDD  R30,Y+15
000347 89f8      	LDD  R31,Y+15+1
000348 9509      	ICALL
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00034a 89a8      	LDD  R26,Y+16
00034b 89b9      	LDD  R27,Y+16+1
00034c 9614      	ADIW R26,4
00034d 940e 0469 	CALL __GETW1P
00034f 83ee      	STD  Y+6,R30
000350 83ff      	STD  Y+6+1,R31
000351 81ae      	LDD  R26,Y+6
000352 81bf      	LDD  R27,Y+6+1
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000354 89a8      	LDD  R26,Y+16
000355 89b9      	LDD  R27,Y+16+1
000356 9614      	ADIW R26,4
000357 940e 0469 	CALL __GETW1P
000359 87ea      	STD  Y+10,R30
00035a 87fb      	STD  Y+10+1,R31
00035b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00035c 01de      	MOVW R26,R28
00035d 961c      	ADIW R26,12
00035e 940e 0454 	CALL __ADDW2R15
000360 940e 0469 	CALL __GETW1P
000362 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000363 940e 02a5 	CALL __lcd_write_data
000365 e0a3      	LDI  R26,LOW(3)
000366 e0b0      	LDI  R27,0
000367 940c 0371 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000369 e3a0      	LDI  R26,LOW(48)
00036a 940e 0291 	CALL __lcd_write_nibble_G101
                +
00036c ec88     +LDI R24 , LOW ( 200 )
00036d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00036e 9701     +SBIW R24 , 1
00036f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000370 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000371 9610      	adiw r26,0
000372 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000373 ed80     +LDI R24 , LOW ( 0x7D0 )
000374 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000375 9701     +SBIW R24 , 1
000376 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000377 95a8      	wdr
000378 9711      	sbiw r26,1
000379 f7c9      	brne __delay_ms0
                 __delay_ms1:
00037a 9508      	ret
                 
                 __ROUND_REPACK:
00037b 2355      	TST  R21
00037c f442      	BRPL __REPACK
00037d 3850      	CPI  R21,0x80
00037e f411      	BRNE __ROUND_REPACK0
00037f ffe0      	SBRS R30,0
000380 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000381 9631      	ADIW R30,1
000382 1f69      	ADC  R22,R25
000383 1f79      	ADC  R23,R25
000384 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000385 e850      	LDI  R21,0x80
000386 2757      	EOR  R21,R23
000387 f411      	BRNE __REPACK0
000388 935f      	PUSH R21
000389 c073      	RJMP __ZERORES
                 __REPACK0:
00038a 3f5f      	CPI  R21,0xFF
00038b f031      	BREQ __REPACK1
00038c 0f66      	LSL  R22
00038d 0c00      	LSL  R0
00038e 9557      	ROR  R21
00038f 9567      	ROR  R22
000390 2f75      	MOV  R23,R21
000391 9508      	RET
                 __REPACK1:
000392 935f      	PUSH R21
000393 2000      	TST  R0
000394 f00a      	BRMI __REPACK2
000395 c073      	RJMP __MAXRES
                 __REPACK2:
000396 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000397 e850      	LDI  R21,0x80
000398 2e19      	MOV  R1,R25
000399 2215      	AND  R1,R21
00039a 0f88      	LSL  R24
00039b 1f99      	ROL  R25
00039c 2795      	EOR  R25,R21
00039d 0f55      	LSL  R21
00039e 9587      	ROR  R24
                 
                 __UNPACK1:
00039f e850      	LDI  R21,0x80
0003a0 2e07      	MOV  R0,R23
0003a1 2205      	AND  R0,R21
0003a2 0f66      	LSL  R22
0003a3 1f77      	ROL  R23
0003a4 2775      	EOR  R23,R21
0003a5 0f55      	LSL  R21
0003a6 9567      	ROR  R22
0003a7 9508      	RET
                 
                 __CFD1U:
0003a8 9468      	SET
0003a9 c001      	RJMP __CFD1U0
                 __CFD1:
0003aa 94e8      	CLT
                 __CFD1U0:
0003ab 935f      	PUSH R21
0003ac dff2      	RCALL __UNPACK1
0003ad 3870      	CPI  R23,0x80
0003ae f018      	BRLO __CFD10
0003af 3f7f      	CPI  R23,0xFF
0003b0 f408      	BRCC __CFD10
0003b1 c04b      	RJMP __ZERORES
                 __CFD10:
0003b2 e156      	LDI  R21,22
0003b3 1b57      	SUB  R21,R23
0003b4 f4aa      	BRPL __CFD11
0003b5 9551      	NEG  R21
0003b6 3058      	CPI  R21,8
0003b7 f40e      	BRTC __CFD19
0003b8 3059      	CPI  R21,9
                 __CFD19:
0003b9 f030      	BRLO __CFD17
0003ba efef      	SER  R30
0003bb efff      	SER  R31
0003bc ef6f      	SER  R22
0003bd e77f      	LDI  R23,0x7F
0003be f977      	BLD  R23,7
0003bf c01a      	RJMP __CFD15
                 __CFD17:
0003c0 2777      	CLR  R23
0003c1 2355      	TST  R21
0003c2 f0b9      	BREQ __CFD15
                 __CFD18:
0003c3 0fee      	LSL  R30
0003c4 1fff      	ROL  R31
0003c5 1f66      	ROL  R22
0003c6 1f77      	ROL  R23
0003c7 955a      	DEC  R21
0003c8 f7d1      	BRNE __CFD18
0003c9 c010      	RJMP __CFD15
                 __CFD11:
0003ca 2777      	CLR  R23
                 __CFD12:
0003cb 3058      	CPI  R21,8
0003cc f028      	BRLO __CFD13
0003cd 2fef      	MOV  R30,R31
0003ce 2ff6      	MOV  R31,R22
0003cf 2f67      	MOV  R22,R23
0003d0 5058      	SUBI R21,8
0003d1 cff9      	RJMP __CFD12
                 __CFD13:
0003d2 2355      	TST  R21
0003d3 f031      	BREQ __CFD15
                 __CFD14:
0003d4 9576      	LSR  R23
0003d5 9567      	ROR  R22
0003d6 95f7      	ROR  R31
0003d7 95e7      	ROR  R30
0003d8 955a      	DEC  R21
0003d9 f7d1      	BRNE __CFD14
                 __CFD15:
0003da 2000      	TST  R0
0003db f40a      	BRPL __CFD16
0003dc d07f      	RCALL __ANEGD1
                 __CFD16:
0003dd 915f      	POP  R21
0003de 9508      	RET
                 
                 __CDF1U:
0003df 9468      	SET
0003e0 c001      	RJMP __CDF1U0
                 __CDF1:
0003e1 94e8      	CLT
                 __CDF1U0:
0003e2 9730      	SBIW R30,0
0003e3 4060      	SBCI R22,0
0003e4 4070      	SBCI R23,0
0003e5 f0b1      	BREQ __CDF10
0003e6 2400      	CLR  R0
0003e7 f026      	BRTS __CDF11
0003e8 2377      	TST  R23
0003e9 f412      	BRPL __CDF11
0003ea 9400      	COM  R0
0003eb d070      	RCALL __ANEGD1
                 __CDF11:
0003ec 2e17      	MOV  R1,R23
0003ed e17e      	LDI  R23,30
0003ee 2011      	TST  R1
                 __CDF12:
0003ef f032      	BRMI __CDF13
0003f0 957a      	DEC  R23
0003f1 0fee      	LSL  R30
0003f2 1fff      	ROL  R31
0003f3 1f66      	ROL  R22
0003f4 1c11      	ROL  R1
0003f5 cff9      	RJMP __CDF12
                 __CDF13:
0003f6 2fef      	MOV  R30,R31
0003f7 2ff6      	MOV  R31,R22
0003f8 2d61      	MOV  R22,R1
0003f9 935f      	PUSH R21
0003fa df8a      	RCALL __REPACK
0003fb 915f      	POP  R21
                 __CDF10:
0003fc 9508      	RET
                 
                 __ZERORES:
0003fd 27ee      	CLR  R30
0003fe 27ff      	CLR  R31
0003ff 2766      	CLR  R22
000400 2777      	CLR  R23
000401 915f      	POP  R21
000402 9508      	RET
                 
                 __MINRES:
000403 efef      	SER  R30
000404 efff      	SER  R31
000405 e76f      	LDI  R22,0x7F
000406 ef7f      	SER  R23
000407 915f      	POP  R21
000408 9508      	RET
                 
                 __MAXRES:
000409 efef      	SER  R30
00040a efff      	SER  R31
00040b e76f      	LDI  R22,0x7F
00040c e77f      	LDI  R23,0x7F
00040d 915f      	POP  R21
00040e 9508      	RET
                 
                 __DIVF21:
00040f 935f      	PUSH R21
000410 df86      	RCALL __UNPACK
000411 3870      	CPI  R23,0x80
000412 f421      	BRNE __DIVF210
000413 2011      	TST  R1
                 __DIVF211:
000414 f40a      	BRPL __DIVF219
000415 cfed      	RJMP __MINRES
                 __DIVF219:
000416 cff2      	RJMP __MAXRES
                 __DIVF210:
000417 3890      	CPI  R25,0x80
000418 f409      	BRNE __DIVF218
                 __DIVF217:
000419 cfe3      	RJMP __ZERORES
                 __DIVF218:
00041a 2401      	EOR  R0,R1
00041b 9408      	SEC
00041c 0b97      	SBC  R25,R23
00041d f41b      	BRVC __DIVF216
00041e f3d4      	BRLT __DIVF217
00041f 2000      	TST  R0
000420 cff3      	RJMP __DIVF211
                 __DIVF216:
000421 2f79      	MOV  R23,R25
000422 931f      	PUSH R17
000423 932f      	PUSH R18
000424 933f      	PUSH R19
000425 934f      	PUSH R20
000426 2411      	CLR  R1
000427 2711      	CLR  R17
000428 2722      	CLR  R18
000429 2733      	CLR  R19
00042a 2744      	CLR  R20
00042b 2755      	CLR  R21
00042c e290      	LDI  R25,32
                 __DIVF212:
00042d 17ae      	CP   R26,R30
00042e 07bf      	CPC  R27,R31
00042f 0786      	CPC  R24,R22
000430 0741      	CPC  R20,R17
000431 f030      	BRLO __DIVF213
000432 1bae      	SUB  R26,R30
000433 0bbf      	SBC  R27,R31
000434 0b86      	SBC  R24,R22
000435 0b41      	SBC  R20,R17
000436 9408      	SEC
000437 c001      	RJMP __DIVF214
                 __DIVF213:
000438 9488      	CLC
                 __DIVF214:
000439 1f55      	ROL  R21
00043a 1f22      	ROL  R18
00043b 1f33      	ROL  R19
00043c 1c11      	ROL  R1
00043d 1faa      	ROL  R26
00043e 1fbb      	ROL  R27
00043f 1f88      	ROL  R24
000440 1f44      	ROL  R20
000441 959a      	DEC  R25
000442 f751      	BRNE __DIVF212
000443 01f9      	MOVW R30,R18
000444 2d61      	MOV  R22,R1
000445 914f      	POP  R20
000446 913f      	POP  R19
000447 912f      	POP  R18
000448 911f      	POP  R17
000449 2366      	TST  R22
00044a f032      	BRMI __DIVF215
00044b 0f55      	LSL  R21
00044c 1fee      	ROL  R30
00044d 1fff      	ROL  R31
00044e 1f66      	ROL  R22
00044f 957a      	DEC  R23
000450 f243      	BRVS __DIVF217
                 __DIVF215:
000451 df29      	RCALL __ROUND_REPACK
000452 915f      	POP  R21
000453 9508      	RET
                 
                 __ADDW2R15:
000454 2400      	CLR  R0
000455 0daf      	ADD  R26,R15
000456 1db0      	ADC  R27,R0
000457 9508      	RET
                 
                 __ANEGW1:
000458 95f1      	NEG  R31
000459 95e1      	NEG  R30
00045a 40f0      	SBCI R31,0
00045b 9508      	RET
                 
                 __ANEGD1:
00045c 95f0      	COM  R31
00045d 9560      	COM  R22
00045e 9570      	COM  R23
00045f 95e1      	NEG  R30
000460 4fff      	SBCI R31,-1
000461 4f6f      	SBCI R22,-1
000462 4f7f      	SBCI R23,-1
000463 9508      	RET
                 
                 __CWD1:
000464 2f6f      	MOV  R22,R31
000465 0f66      	ADD  R22,R22
000466 0b66      	SBC  R22,R22
000467 2f76      	MOV  R23,R22
000468 9508      	RET
                 
                 __GETW1P:
000469 91ed      	LD   R30,X+
00046a 91fc      	LD   R31,X
00046b 9711      	SBIW R26,1
00046c 9508      	RET
                 
                 __GETW1PF:
00046d 9005      	LPM  R0,Z+
00046e 91f4      	LPM  R31,Z
00046f 2de0      	MOV  R30,R0
000470 9508      	RET
                 
                 __PUTPARD1:
000471 937a      	ST   -Y,R23
000472 936a      	ST   -Y,R22
000473 93fa      	ST   -Y,R31
000474 93ea      	ST   -Y,R30
000475 9508      	RET
                 
                 __SAVELOCR6:
000476 935a      	ST   -Y,R21
                 __SAVELOCR5:
000477 934a      	ST   -Y,R20
                 __SAVELOCR4:
000478 933a      	ST   -Y,R19
                 __SAVELOCR3:
000479 932a      	ST   -Y,R18
                 __SAVELOCR2:
00047a 931a      	ST   -Y,R17
00047b 930a      	ST   -Y,R16
00047c 9508      	RET
                 
                 __LOADLOCR6:
00047d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00047e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00047f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000480 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000481 8119      	LDD  R17,Y+1
000482 8108      	LD   R16,Y
000483 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  20 r1 :  12 r2 :   0 r3 :   0 r4 :   4 r5 :   1 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  29 r18:  34 r19:  12 r20:  15 r21:  57 r22:  37 r23:  33 
r24:  31 r25:  15 r26: 105 r27:  43 r28:  14 r29:   1 r30: 217 r31:  78 
x  :  23 y  : 167 z  :  15 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :  25 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  21 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   1 brmi  :   4 brne  :  38 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  59 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   6 cpc   :   6 cpi   :  42 cpse  :   0 dec   :  11 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  24 ld    :  26 ldd   :  77 ldi   : 115 
lds   :   0 lpm   :  14 lsl   :   9 lsr   :   1 mov   :  31 movw  :  20 
mul   :   1 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  47 pop   :  11 push  :  10 rcall :  21 ret   :  34 
reti  :   0 rjmp  :  76 rol   :  19 ror   :   7 sbc   :   6 sbci  :   7 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   2 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :  31 sts   :   2 sub   :   3 subi  :  17 swap  :   1 
tst   :  14 wdr   :   1 
Instructions used: 73 out of 116 (62.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000908   2266     46   2312   16384  14.1%
[.dseg] 0x000060 0x000178      0     24     24    1024   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
